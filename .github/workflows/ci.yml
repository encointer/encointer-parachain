name: CI

on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: 'true'

env:
  VERBOSE: ${{ github.events.input.verbose }}
  SUBWASM_VERSION: 0.14.1


jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-20.04
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  build_primary_binaries:
    name: Primary build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        rust: [stable]
        binary: [release]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v3
      - name: Install protoc
        run: sudo apt-get install protobuf-compiler

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ env.RUST_BIN_DIR }}-${{ matrix.binary }}

      - name: Release
        if: ${{ matrix.binary == 'release' }}
        run: cargo build --locked --release

      # Upload artifacts
      - name: Upload encointer-collator
        uses: actions/upload-artifact@v3
        with:
          name: encointer-collator-${{ github.sha }}
          path: target/release/encointer-collator


  # Run all checks and unit test. This always run on debug mode
  check:
    name: Rust check ${{ matrix.check }} (${{ matrix.rust-target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust-target: [x86_64-unknown-linux-gnu]
        check: [fmt] # ignore clippy for now
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v3

      - name: Install protoc
        run: sudo apt-get install protobuf-compiler

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.check }}

      - name: Fmt
        if: ${{ matrix.check == 'fmt' }}
        run: cargo fmt --all -- --check

      - name: Clippy
        if: ${{ matrix.check == 'clippy' }}
        run: cargo clippy -- -D warnings

  cargo-toml-fmt:
    runs-on: ubuntu-latest
    container: "tamasfe/taplo:0.7.0-alpine"
    steps:
      - uses: actions/checkout@v3

      - name: Run Taplo fmt
        run: taplo fmt --check

      - name: Fail-fast; cancel other jobs
        if: failure()
        uses: andymckay/cancel-action@0.2

  create_artifacts:
    needs: [ build_primary_binaries ]
    runs-on: ubuntu-20.04
    env:
      CHAIN_SPEC: ${{ matrix.chain }}-${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        chain: [ encointer ]
        config: [ rococo, westend, kusama ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: encointer-collator-${{ github.sha }}

      - name: 'Create binaries for artifacts'
        # The build-spec cmd does not create a deterministic key order in the produced json. Hence, we sort the keys
        # before we use it to deterministically create the state.
        run: |
          chmod +x ./encointer-collator
          ./encointer-collator build-spec --chain ${{ env.CHAIN_SPEC }} --disable-default-bootnode --raw > ${{ env.CHAIN_SPEC }}-unsorted.json
          jq --sort-keys . ${{ env.CHAIN_SPEC }}-unsorted.json > ${{ env.CHAIN_SPEC }}.json
          ./encointer-collator export-genesis-state --chain ${{ env.CHAIN_SPEC }}.json >  ${{ env.CHAIN_SPEC }}.json.state
          ./encointer-collator export-genesis-state --chain ${{ env.CHAIN_SPEC }} >  ${{ env.CHAIN_SPEC }}.state

      - name: Compute file metadata
        id: vars
        run: |
          sha256sum ${{ env.CHAIN_SPEC }}.state >> checksums.txt
          sha256sum ${{ env.CHAIN_SPEC }}.json >> checksums.txt
          sha256sum ${{ env.CHAIN_SPEC }}.json.state >> checksums.txt

      - name: Upload ${{ env.CHAIN_SPEC }} Files
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CHAIN_SPEC }}-genesis-spec-${{ github.sha }}
          path: |
            checksums.txt
            ${{ env.CHAIN_SPEC }}.state
            ${{ env.CHAIN_SPEC }}.json
            ${{ env.CHAIN_SPEC }}.json.state

  release:
    name: Draft Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [create_artifacts, build_primary_binaries, check]
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Download Integritee Collator
        uses: actions/download-artifact@v3
        with:
          name: encointer-collator-${{ github.sha }}

      - name: Create required package.json
        run: test -f package.json || echo '{}' >package.json

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: .

      - name: Release
        id: create-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: true
          files: |
            encointer-collator
