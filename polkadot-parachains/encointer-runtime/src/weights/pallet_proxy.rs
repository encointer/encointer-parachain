// Copyright 2021 Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("statemine-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot-collator
// benchmark
// --chain=statemine-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_proxy
// --extrinsic=*
// --steps=50
// --repeat=20
// --json-file=./bench-statemine.json
// --header=./file_header.txt
// --output=./polkadot-parachains/statemine/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_proxy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
    // Storage: Proxy Proxies (r:1 w:0)
    fn proxy(p: u32, ) -> Weight {
        Weight::from_ref_time(13_530_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(91_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn proxy_announced(a: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(29_316_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(218_000_u64).saturating_mul(a.into()))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(92_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn remove_announcement(a: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(19_752_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(230_000_u64).saturating_mul(a.into()))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(14_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn reject_announcement(a: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(19_699_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(231_000_u64).saturating_mul(a.into()))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(16_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn announce(a: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(27_298_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(218_000_u64).saturating_mul(a.into()))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(88_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn add_proxy(p: u32, ) -> Weight {
        Weight::from_ref_time(22_349_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(147_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxy(p: u32, ) -> Weight {
        Weight::from_ref_time(18_618_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(161_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxies(p: u32, ) -> Weight {
        Weight::from_ref_time(18_655_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(85_000_u64).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn create_pure(_: u32) -> Weight { todo!() }
    fn kill_pure(_: u32) -> Weight { todo!() }
}
